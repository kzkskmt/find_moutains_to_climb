<!-- 山の詳細-->
<section class="mtshow-section" id="mtshow">
  <div class="container px-4 px-lg-5">
    <!-- Featured mtshow Row-->
    <div class="row gx-0 align-items-center">
      <div class="col-xl-8 col-lg-7">
        <%= image_tag @mountain.image.url, class: 'img-fluid mb-3 mb-lg-0 rounded-4' %>
      </div>
      <div class="col-xl-4 col-lg-5">
        <div class="featured-text text-lg-left">
          <h5 class="text-black-50 mb-0"><%= @mountain.name_en%></h5>
          <h2 class="mb-0"><%= @mountain.name %></h2>
          <hr class="mb-4 mx-auto" />
          <p class="text-black-50 mb-0">標　高：<%= @mountain.elevation %>m</p>
          <p class="text-black-50 mb-0">エリア：<%= @mountain.pref.name %></p>
          <% if @mountain.level.present? %>
            <p class="text-black-50 mb-0">難易度：<%= @mountain.level_i18n %></p>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- 天気と服装-->
<section class="weather-section text-center" id="weather">
  <div class="container px-4 px-lg-5">
    <div class="row gx-4 gx-lg-5 justify-content-center">
      <div class="col-lg-8">
        <h2 class="mb-4">山頂の天気予報</h2>
        <!-- 山頂の天気予報表示-->
        <div id="openweather" class="d-flex mb-5"></div>
      </div>
      <div class="col-lg-8">
        <h2 class="mb-4">登山口周辺の天気予報</h2>
        <!-- 市町村の天気予報表示-->
        <div class="d-flex mb-5" id="openweather_city"></div>
      </div>
    </div>
    <div class="row gx-4 gx-lg-5 justify-content-center" id="outfit">
      <div class="col-lg-8">
        <h2 class="mb-4 mt-5">もし、明日登山するなら</h2>
        <div id="best_outfit"></div>
        <p id="best_outfit_link"></p>
      </div>
    </div>
  </div>
</section>

<!-- 地図-->
<section class="map-section" id="map">
  <div class="container px-4 px-lg-5">
    <!-- Featured Map Row-->
    <div class="row gx-0 mb-4 mb-lg-5 align-items-center">
      <!-- googlemapを埋め込む場所　-->
      <input id="pac-input" class="form-control" type="text" placeholder="キーワード" />
      <div id='googlemap' style="height:420px" class='mb-3 mb-lg-0 rounded-4'></div>
    </div>

    <!-- 周辺施設検索-->
    <div class="row gx-4 gx-lg-5">
      <div class="col-md-10 col-lg-10 mx-auto">
      <h3 class="text-center">周辺施設を探す</h3>
        <div class="nearby-search">
          <div class="row">
            <div class="col-6 d-inline-block mb-2">
              <input name="キーワード" type="text" id="keywordInput" class="form-control" placeholder="施設キーワード（駐車場、銭湯など）">
            </div>
            <div class="col-3 d-inline-block">
              <select name="検索範囲" id="radiusInput" class="form-control">
                <option value="500" selected>500 m 以内</option>
                <option value="1000">1 km 以内</option>
                <option value="3000">3 km 以内</option>
                <option value="5000">5 km 以内</option>
              <select>
            </div>
            <div class="col-auto d-inline-block">
              <input type="button" value="検索" class="col-auto btn btn-primary" onclick="getPlaces();">
            </div>
          </div>
          <div class="mt-4" id="results"></div>
        </div>
      </div>
    </div>
  </div>
</section>


<!-- ギャラリー-->
<section class="gallery-section text-center">
  <div class="container px-4 px-lg-5">
    <div class="row gx-4 gx-lg-5">
      <h2 class="mb-2">ギャラリー</h2>
      <p class="mb-4">GoogleMapから写真を表示しています</p>
      <% if @google_img_urls.present? %>
        <% @google_img_urls.each do |url| %>
          <div class="col-md-4 mb-3">
            <div class="card h-100">
              <div class="card-body text-center">
                <%= image_tag url, class: 'img-fluid' %>
              </div>
            </div>
          </div>
        <% end %>
      <% else %>
        <p class="mb-4">写真が見つかりませんでした</p>
      <% end %>
    </div>
  </div>
</section>


<!-- Tweet-->
<% if @tweet_img_urls.present? %>
  <section class="gallery-section text-center">
    <div class="container px-4 px-lg-5">
      <div class="row gx-4 gx-lg-5">
        <h2 class="mb-2"><%= "##{@mountain.name}" %> on twitter</h2>
        <p class="mb-4">過去１週間に <%= "##{@mountain.name}" %> で投稿されたツイートから写真を表示しています</p>
        <% @tweet_img_urls.each do |url| %>
          <div class="col-md-4 mb-3">
            <div class="card h-100">
              <div class="card-body text-center">
                <%= image_tag url, class: 'img-fluid' %>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </section>
<% end %>

<!-- 投稿-->
<section class="post-section bg-light">
  <div class="container px-4 px-lg-5">
    <div class="row">
      <!-- col (列) の指定 -->
      <div class="col-sm-9">
        <h2 class="mb-4">登山した人たちの感想</h2>
      </div>
      <% if logged_in? %>
        <div class="col-sm-3 text-end text-black-50">
          <%= link_to new_post_path(mountain_id: @mountain) do%>
            <i class="far fa-edit"></i> 投稿する
          <% end %>
        </div>
      <% end %>
    </div>
    <!-- 投稿があれば表示 -->
    <% if @posts.present? %>
      <%= render 'posts/post', posts: @posts %>
    <% else %>
      <h5>...まだ投稿がありません。</h5>
      <%= link_to new_post_path(mountain_id: @mountain), class: "btn btn-warning text-white rounded-4", 'data-turbolinks': false do %>
        感想を投稿する？
      <% end %>
    <% end %>
  </div>
</section>

<script>
  // 各mountainデータを格納する箱 obj
  let obj = {};
  // mountainデータを格納する箱 markerData
  let markerData = [];
  // markerDataにmountainデータをループ処理で格納
  <% @mountains_on_map.each do |mountain| %>
    obj = {
      id: <%= mountain.id %>,
      name: '<%= mountain.name %>',
      elevation: '<%= mountain.elevation %>',
      level: '<%= mountain.level %>',
      lat: <%= mountain.peak_location_lat %>,
      lng: <%= mountain.peak_location_lng %>
    };
  markerData.push(obj)
  <% end %>

  // 表示する地図の中心位置とズームレベルを定義
  let center_of_map = {
    lat: <%= @center_of_map_lat %>,
    lng: <%= @center_of_map_lng %>
  };
  let zoom_level_of_map = <%= @zoom_level_of_map %>;


  /////////////////////// 天気予報 ///////////////////////
  // $(function(){ ... }); は
  // jQuery(document).ready(function(){ ... }); と同じ
  // 渡された関数オブジェクトは、DOMの準備が完了した時に実行される。
  // そして、この渡した関数オブジェクトは、実行時に「jQuery」そのものを受け取ることができる。
  $(function () {
    const API_KEY = "<%= ENV['OPENWEATHER_MAP_API_KEY'] %>";
    // 山頂の経度緯度を定義
    const lat = <%= @mountain.peak_location_lat%>;
    const lon = <%= @mountain.peak_location_lng%>;
    // APIリクエストurl作成（「onecall」では7日間の天気を取得できるが日付文字列データ(dt_txt)がレスポンスに入っていないため、「5dayweatherforecast」を利用する）
    const url = 'https://api.openweathermap.org/data/2.5/forecast?lat=' + lat + '&lon=' + lon + '&units=metric&appid=' + API_KEY;
    
    $.ajax({
      url: url,
      dataType: 'json',
      type: 'GET',
    })
    .done(function (data) {
      let insertHTML = '';
      let temp_tomorrow = '';

      // デフォルトでは3時間ごとの天気を取得するため、
      // 8の倍数でデータを取得することにより、24時間ごとの天気を取得する
      for (let i = 0; i <= 32; i = i + 8) {
        insertHTML += buildHTML(data, i);
      }
      $('#openweather').html(insertHTML);
      
      // 登山口周辺の天気予報も表示する。
      const city_id = data.city.id;
      const url_city = 'https://api.openweathermap.org/data/2.5/forecast?id=' + city_id + '&units=metric&appid=' + API_KEY;
      $.ajax({
        url: url_city,
        dataType: 'json',
        type: 'GET',
      })
      .done(function (data) {
        let insertHTML_city = '';
        for (let i = 0; i <= 32; i = i + 8) {
          insertHTML_city += buildHTML(data, i);
          // 明日（24時間後なので、i == 8の時）の気温を取得
          if (i == 8) {
          temp_tomorrow = data.list[i].main.temp;
        }
        }
        $('#openweather_city').html(insertHTML_city);

        // 明日の気温と服装の適応気温を比較し、最適な服装を表示
        const temp_summer = <%= @outfits.first.lower_limit_temp %>;
        const temp_spring = <%= @outfits.second.lower_limit_temp %>;
        if ( temp_summer < temp_tomorrow ){
          $("#best_outfit").html('<%= image_tag @outfits.first.image.url, class: 'img-fluid mb-3 mb-lg-0' %>');
          $("#best_outfit_link").html('<p class="text-black-50">こんな感じの服装でどうでしょうか。服装については<%= link_to 'こちら', outfits_path(anchor: "#{@outfits.first.id}"), 'data-turbolinks': false%>から。</p>');
        } else if ( temp_spring < temp_tomorrow ) {
          $("#best_outfit").html('<%= image_tag @outfits.second.image.url, class: 'img-fluid mb-3 mb-lg-0' %>');
          $("#best_outfit_link").html('<p class="text-black-50">こんな感じの服装でどうでしょうか。服装については<%= link_to 'こちら', outfits_path(anchor: "#{@outfits.second.id}"), 'data-turbolinks': false%>から。</p>');
        } else {
          $("#best_outfit").html('<h4>...ぴったりな服装が見つかりませんでした。</h4>');
          $("#best_outfit_link").html('<p class="text-black-50">服装については<%= link_to 'こちら', outfits_path %>から。</p>');
        }
      })
    })

    .fail(function (data) {
      alert('天気予報取得に失敗しました');
    });
  });

  // 日本語化 最高気温は四捨五入、最低気温は切り捨て
  function buildHTML(data, i) {
    const Week = new Array('(日)', '(月)', '(火)', '(水)', '(木)', '(金)', '(土)');
    const date = new Date(data.list[i].dt_txt);
    date.setHours(date.getHours() + 9);
    const month = date.getMonth() + 1;
    const day = month + '/' + date.getDate() + Week[date.getDay()];
    const icon = data.list[i].weather[0].icon;
    const html =
    '<div class="weather-report text-black-50 mx-auto">' +
      '<img src="https://openweathermap.org/img/w/' + icon + '.png">' +
      '<span class="weather-date">' + day + "</span>" +
      '<div class="weather-temp-max">' + '最高：' + Math.round(data.list[i].main.temp_max) + "℃</div>" +
      '<span class="weather-temp-min">' + '最低：' + Math.floor(data.list[i].main.temp_min) + "℃</span>" +
    '</div>';
    return html
  }


  /////////////////////// 周辺施設 ///////////////////////

  //位置情報を使って周辺検索
  function getPlaces(){
    const location = new google.maps.LatLng(<%= @mountain.peak_location_lat %>, <%= @mountain.peak_location_lng %>);
    
    //初期化
    document.getElementById('results').innerHTML = "";
    placesList = new Array();
    
    //Mapインスタンス生成
    const map = new google.maps.Map(
      document.getElementById('googlemap'),
      {
        zoom: 13,
        center: location
      }
     );

    //登山口マーカーの表示
    //const location = new google.maps.LatLng(<%= @mountain.peak_location_lat %>, <%= @mountain.peak_location_lng %>);
    //const start_point_marker = new google.maps.Marker({
      //position: location,
      //map: map
    //  });

    //入力した検索範囲を取得
    const obj = document.getElementById("radiusInput");
    const radiusInput = Number(obj.options[obj.selectedIndex].value);
    
    //PlacesServiceインスタンス生成
    const service = new google.maps.places.PlacesService(map);

    //入力したKeywordを取得
    const keywordInput = document.getElementById("keywordInput").value;
    
    //周辺検索
    service.nearbySearch(
      {
        location: location,
        radius: radiusInput,
        keyword: keywordInput,
        language: 'ja'
      },
      // 以下で定義したdisplayResultsメソッドを使って検索結果の表示
      displayResults
    );

    //検索範囲の円を描く
    const circle = new google.maps.Circle(
      {
        map: map,
        center: location,
        radius: radiusInput,
        fillColor: '#ff0000',
        fillOpacity: 0.3,
        strokeColor: '#ff0000',
        strokeOpacity: 0.5,
        strokeWeight: 1
      }
    );
  }

  /*
  周辺検索の結果表示
  ※nearbySearchのコールバック関数
    results : 検索結果
    status ： 実行結果ステータス
    pagination : ページネーション
  */
  function displayResults(results, status, pagination) {
      
    if(status == google.maps.places.PlacesServiceStatus.OK) {
    
      //検索結果をplacesList配列に連結
      placesList = placesList.concat(results);
      
      //pagination.hasNextPage==trueの場合、
      //続きの検索結果あり
      if (pagination.hasNextPage) {
        
        //pagination.nextPageで次の検索結果を表示する
        //※連続実行すると取得に失敗するので、
        //1秒くらい間隔をおく
        setTimeout(pagination.nextPage(), 1000);
      
      //pagination.hasNextPage==falseになったら
      //全ての情報が取得できているので、
      //結果を表示する
      } else {

        //ソートを正しく行うため、
        //ratingが設定されていないものを
        //一旦「-1」に変更する。
        for (let i = 0; i < placesList.length; i++) {
          if(placesList[i].rating == undefined){
            placesList[i].rating = -1;
          }
        }
        
        //ratingの降順でソート（連想配列ソート）
        placesList.sort(function(a,b){
          if(a.rating > b.rating) return -1;
          if(a.rating < b.rating) return 1;
          return 0;
        });
        
        //placesList配列をループして、
        //結果表示のHTMLタグを組み立てる
        let resultHTML = "<ul>";
        
        for (let i = 0; i < placesList.length; i++) {
          place = placesList[i];
          
          //ratingが-1のものは「---」に表示、それ以外は小数点第一位まで表示
          let rating = place.rating;
          if(rating == -1) {
              rating = "---";
          } else {
              rating = rating.toFixed(1);
          };
          
          //表示内容（評価＋名称）
          let content = "【評価:" + rating + "】 " + place.name;
          
          //クリック時にMapにマーカー表示するようにAタグを作成
        　resultHTML += "<li>" +
                      　"<a href=\"javascript: void(0);\"" +
                      　" onclick=\"createMarker(" +
                      　"'" + place.name + "'," +
                      　"'" + place.vicinity + "'," +
                      　place.geometry.location.lat() + "," +
                      　place.geometry.location.lng() + ")\">" +
                      　content +
                      　"</a>" +
                      　"</li>";
        }
        
        resultHTML += "</ul>";
        
        //結果表示
        document.getElementById("results").innerHTML = resultHTML;
      }
    
    } else {
      //エラー表示
      let results = document.getElementById("results");
      if(status == google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
        results.innerHTML = "見つかりませんでした。";
      } else if(status == google.maps.places.PlacesServiceStatus.ERROR) {
        results.innerHTML = "サーバ接続に失敗しました。";
      } else if(status == google.maps.places.PlacesServiceStatus.INVALID_REQUEST) {
        results.innerHTML = "リクエストが無効でした。";
      } else if(status == google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
        results.innerHTML = "リクエストの利用制限回数を超えました。";
      } else if(status == google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {
        results.innerHTML = "サービスが使えない状態でした。";
      } else if(status == google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR) {
        results.innerHTML = "原因不明のエラーが発生しました。";
      }

    }
  }


  /*
  マーカー表示
    name : 名称
    vicinity : 近辺住所
    lat : 緯度
    lng : 経度
  */
  function createMarker(name, vicinity, lat, lng){
    
    //マーカー表示する位置のMap表示
    const map = new google.maps.Map(document.getElementById('googlemap'), {
      zoom: 15,
      center: new google.maps.LatLng(lat, lng)
    });
    
    //マーカー表示
    const marker = new google.maps.Marker({
      map: map,
      position: new google.maps.LatLng(lat, lng)
    });

    //登山口マーカーの表示
    //const location = new google.maps.LatLng(<%= @mountain.peak_location_lat %>, <%= @mountain.peak_location_lng %>);
    //const start_point_marker = new google.maps.Marker({
      //position: location,
      //map: map
    //});

    
    //情報窓の設定
    const info = "<div style=\"min-width: 100px\">" +
              name + "<br />" + vicinity + "<br />" +
              "<a href=\"https://maps.google.co.jp/maps?q=" + encodeURIComponent(name + " " + vicinity) + "&z=15&iwloc=A\"" +
              " target=\"_blank\">⇒詳細表示</a><br />" +
              "<a href=\"https://www.google.com/maps/dir/?api=1&destination=" + lat + "," + lng + "\"" +
              " target=\"_blank\">⇒ルート検索</a>" +
              "</div>";
    
    //情報窓の表示
    const infoWindow = new google.maps.InfoWindow({
      content: info
    });
    infoWindow.open(map, marker);
    
    //マーカーのクリック時にも情報窓を表示する
    marker.addListener("click", function(){
      infoWindow.open(map, marker);
    });
  }
</script>