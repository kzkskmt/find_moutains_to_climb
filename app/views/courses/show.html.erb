<section class="map-section bg-light" id="map">
    <div class="container px-4 px-lg-5">
        <!-- Map One Row-->
        <div class="row gx-0 mb-5 mb-lg-0 justify-content-center">
            <div class="col-lg-6"><%= image_tag 'img/demo-image-01.jpg', class: 'img-fluid' %></div>
            <div class="col-lg-6">
                <div class="bg-black text-center h-100 map">
                    <div class="d-flex h-100">
                        <div class="map-text w-100 my-auto text-center text-lg-left">
                            <h4 class="text-white"><%= @course.name %></h4>
                            <p class="mb-0 text-white-50">登り所要時間：<%= hhmm(@course.ascent_time) %></p>
                            <p class="mb-0 text-white-50">下り所要時間：<%= hhmm(@course.descent_time) %></p>
                            <hr class="d-none d-lg-block mb-0 ms-0" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<section class="about-section text-center" id="about">
<div class="container px-4 px-lg-5">
    <div class="row gx-4 gx-lg-5 justify-content-center">
        <div class="col-lg-8">
            <h2 class="text-white mb-4">「Find Mts」でできること</h2>
            <p class="text-white-50">
                山の検索から、登山の所要時間、登山口までのルート検索、
                山の天気や服装の提案、周辺の宿泊施設他登山に関わる情報をまとめて調べることができます。
                <a href="https://startbootstrap.com/theme/grayscale/">the preview page.</a>
            </p>
        </div>
    </div>
</div>
</section>

<table>
<tr>
  <td><input name="キーワード" type="text" id="keywordInput" style="width: 200px" placeholder="キーワード"></td>
</tr>
<tr>
  <td>検索範囲：
    <select name="検索範囲" id="radiusInput">
    <option value="200" selected>200 m</option>
    <option value="500">500 m</option>
    <option value="1000">1 km</option>
    <option value="1500">1.5 km</option>
    <option value="15000">15 km</option>
    <select>
  </td>
</tr>
<tr>
  <td colspan="2" style="padding: 10px">
    <input type="button" value="周辺の施設を探す" onclick="getPlaces();">
  </td>
</tr>
<div id="mapArea" style="height:500px;"></div>

</table>
<div id="results"></div>



<script>

var placesList;

// var location = new google.maps.LatLng(<%= @course.starting_point_lat %>, <%= @course.starting_point_lng %>); 


function initMap() {
  var location = new google.maps.LatLng(<%= @course.starting_point_lat %>, <%= @course.starting_point_lng %>);
  var map = new google.maps.Map(document.getElementById("mapArea"), {
    zoom: 13,
    center: location
  });

  var start_point_marker = new google.maps.Marker({
    position: location,
    map: map
  });
}


//位置情報を使って周辺検索
function getPlaces(){
  var location = new google.maps.LatLng(<%= @course.starting_point_lat %>, <%= @course.starting_point_lng %>);
  
  //初期化
  document.getElementById("results").innerHTML = "";
  placesList = new Array();
  
  //Mapインスタンス生成
  var map = new google.maps.Map(
    document.getElementById("mapArea"),
    {
      zoom: 15,
      center: location
    }
  );

  //登山口マーカーの表示
  var location = new google.maps.LatLng(<%= @course.starting_point_lat %>, <%= @course.starting_point_lng %>);
  var start_point_marker = new google.maps.Marker({
    position: location,
    map: map
  });

  //入力した検索範囲を取得
  var obj = document.getElementById("radiusInput");
  var radiusInput = Number(obj.options[obj.selectedIndex].value);
  
  //PlacesServiceインスタンス生成
  var service = new google.maps.places.PlacesService(map);

  //入力したKeywordを取得
  var keywordInput = document.getElementById("keywordInput").value;
  
  //周辺検索
  service.nearbySearch(
    {
      location: location,
      radius: radiusInput,
      keyword: keywordInput,
      language: 'ja'
    },
    // displayResultsメソッドを使って検索結果の表示
    displayResults
  );

  //検索範囲の円を描く
  var circle = new google.maps.Circle(
    {
      map: map,
      center: location,
      radius: radiusInput,
      fillColor: '#ff0000',
      fillOpacity: 0.3,
      strokeColor: '#ff0000',
      strokeOpacity: 0.5,
      strokeWeight: 1
    }
  );
}

/*
 周辺検索の結果表示
 ※nearbySearchのコールバック関数
  results : 検索結果
  status ： 実行結果ステータス
  pagination : ページネーション
*/
function displayResults(results, status, pagination) {
    
  if(status == google.maps.places.PlacesServiceStatus.OK) {
  
    //検索結果をplacesList配列に連結
    placesList = placesList.concat(results);
    
    //pagination.hasNextPage==trueの場合、
    //続きの検索結果あり
    if (pagination.hasNextPage) {
      
      //pagination.nextPageで次の検索結果を表示する
      //※連続実行すると取得に失敗するので、
      //1秒くらい間隔をおく
      setTimeout(pagination.nextPage(), 1000);
    
    //pagination.hasNextPage==falseになったら
    //全ての情報が取得できているので、
    //結果を表示する
    } else {
      
        //ソートを正しく行うため、
        //ratingが設定されていないものを
        //一旦「-1」に変更する。
        for (var i = 0; i < placesList.length; i++) {
          if(placesList[i].rating == undefined){
            placesList[i].rating = -1;
          }
        }
        
        //ratingの降順でソート（連想配列ソート）
        placesList.sort(function(a,b){
          if(a.rating > b.rating) return -1;
          if(a.rating < b.rating) return 1;
          return 0;
        });
        
        //placesList配列をループして、
        //結果表示のHTMLタグを組み立てる
        var resultHTML = "<ol>";
        
        for (var i = 0; i < placesList.length; i++) {
          place = placesList[i];
          
          //ratingが-1のものは「---」に表示、それ以外は小数点第一位まで表示
          var rating = place.rating;
          if(rating == -1) {
              rating = "---";
          } else {
              rating = rating.toFixed(1);
          };
          
          //表示内容（評価＋名称）
          var content = "【評価:" + rating + "】 " + place.name;
          
          //クリック時にMapにマーカー表示するようにAタグを作成
        　resultHTML += "<li>";
        　resultHTML += "<a href=\"javascript: void(0);\"";
        　resultHTML += " onclick=\"createMarker(";
        　resultHTML += "'" + place.name + "',";
        　resultHTML += "'" + place.vicinity + "',";
        　resultHTML += place.geometry.location.lat() + ",";
        　resultHTML += place.geometry.location.lng() + ")\">";
        　resultHTML += content;
        　resultHTML += "</a>";
        　resultHTML += "</li>";
        　}
        
        resultHTML += "</ol>";
        
        //結果表示
        document.getElementById("results").innerHTML = resultHTML;
    }
  
  } else {
    //エラー表示
    var results = document.getElementById("results");
    if(status == google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
      results.innerHTML = "見つかりませんでした。";
    } else if(status == google.maps.places.PlacesServiceStatus.ERROR) {
      results.innerHTML = "サーバ接続に失敗しました。";
    } else if(status == google.maps.places.PlacesServiceStatus.INVALID_REQUEST) {
      results.innerHTML = "リクエストが無効でした。";
    } else if(status == google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
      results.innerHTML = "リクエストの利用制限回数を超えました。";
    } else if(status == google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {
      results.innerHTML = "サービスが使えない状態でした。";
    } else if(status == google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR) {
      results.innerHTML = "原因不明のエラーが発生しました。";
    }

  }
}


/*
 マーカー表示
  name : 名称
  vicinity : 近辺住所
  lat : 緯度
  lng : 経度
*/
function createMarker(name, vicinity, lat, lng){
  
  //マーカー表示する位置のMap表示
  var map = new google.maps.Map(document.getElementById("mapArea"), {
    zoom: 15,
    center: new google.maps.LatLng(lat, lng)
  });
  
  //マーカー表示
  var marker = new google.maps.Marker({
    map: map,
    position: new google.maps.LatLng(lat, lng)
  });

  //登山口マーカーの表示
  var location = new google.maps.LatLng(<%= @course.starting_point_lat %>, <%= @course.starting_point_lng %>);
  var start_point_marker = new google.maps.Marker({
    position: location,
    map: map
  });

  
  //情報窓の設定
  var info = "<div style=\"min-width: 100px\">";
  info += name + "<br />";
  info += vicinity + "<br />";
  info += "<a href=\"https://maps.google.co.jp/maps?q=" + encodeURIComponent(name + " " + vicinity) + "&z=15&iwloc=A\"";
  info += " target=\"_blank\">⇒詳細表示</a><br />";
  info += "<a href=\"https://www.google.com/maps/dir/?api=1&destination=" + lat + "," + lng + "\"";
  info += " target=\"_blank\">⇒ここへ行く</a>";
  info += "</div>";
  
  //情報窓の表示
  var infoWindow = new google.maps.InfoWindow({
    content: info
  });
  infoWindow.open(map, marker);
  
  //マーカーのクリック時にも情報窓を表示する
  marker.addListener("click", function(){
    infoWindow.open(map, marker);
  });
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=<%= ENV["GOOGLE_MAP_API_KEY"]%>&libraries=places&callback=initMap" async defer></script>
